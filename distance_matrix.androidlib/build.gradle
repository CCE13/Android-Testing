buildscript {

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0'

    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33


        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_15
        targetCompatibility JavaVersion.VERSION_15
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['C:\\School\\Projects\\RunAI-LIBGDX\\android\\libs']
        }
    }
    namespace 'com.abk.gps_forground'

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}


configurations {
    natives
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}


tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("merge") && packageTask.name.contains("JniLibFolders")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], exclude: ['classes2.jar'], dir: 'libs')
    implementation project(path: ':core')
    implementation 'com.google.android.gms:play-services-location:21.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.1'
    implementation files('C:/School/Projects/RunAI-LIBGDX/jfmod/core.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter'


    //releaseImplementation fileTree(dir: "jfmod", include: ['*.aar', '*.jar'])
    compileOnly files('libs/classes2.jar')

    implementation 'com.karumi:dexter:6.2.0'
    implementation 'com.google.code.gson:gson:2.8.8'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.20'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    implementation 'org.greenrobot:eventbus:3.2.0'


    //ChatGPT api implimentation
    implementation 'com.theokanning.openai-gpt3-java:client:0.16.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.0'
    implementation 'com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.34'
    //implementation 'com.github.mbknor:mbknor-jackson-jsonSchema:1.0.34'
    implementation 'com.theokanning.openai-gpt3-java:service:0.16.0'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:32.1.1')

    // Declare the dependency for the Cloud Firestore library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-firestore'

    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.11'

    //For unit testing importing junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation "org.robolectric:robolectric:4.6.1"

    //Json Streaming API
    //implementation 'com.fasterxml.jackson.core:jackson-core:2.13.0'

    //EventBUs
    implementation 'org.greenrobot:eventbus:3.2.0'

    //api fileTree(dir: "jfmod", include: "*.*")
    api project(':jfmod')

}


repositories {
}